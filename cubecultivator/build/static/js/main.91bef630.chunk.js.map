{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["collection","require","Cards","Card","active","index","onClick","id","className","src","image_uris","en","alt","name","App","useState","chosen","setChosen","selected","setSelected","Object","keys","map","key","includes","cardList","data","Blob","type","fileURL","window","URL","createObjectURL","tempLink","document","createElement","href","setAttribute","click","length","filtered","filter","selection","removeFromList","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"g8omKAGMA,G,MAAaC,EAAQ,KACrBC,EAAQD,EAAQ,IAEhBE,EAAO,SAAC,GAA8B,IAA7BC,EAA4B,EAA5BA,OAAQC,EAAoB,EAApBA,MAAOC,EAAa,EAAbA,QAC5B,OACE,yBAAKA,QAASA,EAASC,GAAIF,EAAOG,UAAWJ,EAAS,cAAgB,QACpE,yBAAKK,IAAKP,EAAMG,GAAOK,WAAWC,GAAIC,IAAKV,EAAMG,GAAOQ,SAoD/CC,MA/Cf,WAAgB,IAAD,EACeC,qBADf,mBACNC,EADM,KACEC,EADF,OAEmBF,mBAAS,IAF5B,mBAENG,EAFM,KAEIC,EAFJ,KAkBb,OACE,yBAAKX,UAAU,OACb,yBAAKD,GAAG,uBAAsB,iDAC9B,yBAAKA,GAAG,iBAEJa,OAAOC,KAAKrB,GAAYsB,KAAI,SAACC,GAAD,OAC1B,kBAAC,EAAD,CAAMnB,OAAQmB,IAAQP,EAAQX,MAAOkB,EAAKjB,QAAS,kBAAMW,EAAUM,IAAMA,IAAKA,QAIpF,yBAAKhB,GAAG,qBACN,4BAAQD,QAtBI,kBAAOY,EAASM,SAASR,IAAWG,EAAY,GAAD,mBAAKD,GAAL,CAAeF,OAsB1E,eAAgD,4BAAQV,QArBhD,WACZ,IAAMmB,EAAWP,EAASI,KAAI,SAACf,GAAD,OAAQL,EAAMK,GAAIM,KAAO,QACjDa,EAAO,IAAIC,KAAKF,EAAU,CAACG,KAAM,SACjCC,EAAUC,OAAOC,IAAIC,gBAAgBN,GACrCO,EAAWC,SAASC,cAAc,KACxCF,EAASG,KAAOP,EAChBI,EAASI,aAAa,WAAY,gBAClCJ,EAASK,UAc2C,gBAElD,yBAAK/B,GAAG,uBAAsB,+CAC9B,yBAAKA,GAAG,iBACR,yBAAKA,GAAG,iBAAR,eAAqCW,EAASqB,QAE1CrB,GAAYA,EAASI,KAAI,SAACf,GAAD,OACzB,yBAAKC,UAAU,WAAWe,IAAKhB,GAC7B,8BAAOL,EAAMK,GAAIM,MACjB,4BAAQP,QAAS,kBAnCJ,SAACC,GACtB,IAAMiC,EAAWtB,EAASuB,QAAO,SAAAC,GAAS,OAAInC,IAAOmC,KACrDvB,EAAYqB,GAiCmBG,CAAepC,KAAtC,iBCxCQqC,QACW,cAA7Bd,OAAOe,SAASC,UAEe,UAA7BhB,OAAOe,SAASC,UAEhBhB,OAAOe,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFhB,SAASiB,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.91bef630.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport './App.css';\n\nconst collection = require('./devData/collection.json');\nconst Cards = require('./devData/MTGACards.json');\n\nconst Card = ({active, index, onClick}) => {\n  return (\n    <div onClick={onClick} id={index} className={active ? \"card active\" : \"card\"}>\n      <img src={Cards[index].image_uris.en} alt={Cards[index].name}/>\n    </div>\n  );\n};\n\nfunction App() {\n  const [chosen, setChosen] = useState();\n  const [selected, setSelected] = useState([]);\n  const removeFromList = (id) => {\n    const filtered = selected.filter(selection => id !== selection);\n    setSelected(filtered);\n  };\n  const addToCube = () => !selected.includes(chosen) && setSelected([...selected, chosen]);\n  const xport = () => {\n    const cardList = selected.map((id) => Cards[id].name + '\\n');\n    const data = new Blob(cardList, {type: 'text'});\n    const fileURL = window.URL.createObjectURL(data);\n    const tempLink = document.createElement('a');\n    tempLink.href = fileURL;\n    tempLink.setAttribute('download', 'filename.txt');\n    tempLink.click();\n  };\n\n  return (\n    <div className=\"App\">\n      <div id=\"cardContainerHeader\"><h2>Group collection</h2></div>\n      <div id=\"cardContainer\">\n        {\n          Object.keys(collection).map((key) => \n            <Card active={key === chosen} index={key} onClick={() => setChosen(key)} key={key} />\n          )\n        }\n      </div>\n      <div id=\"selectorContainer\">\n        <button onClick={addToCube}>Add to Cube</button><button onClick={xport}>Export Cube</button>\n      </div>\n      <div id=\"listContainerHeader\"><h2>Cube Card List</h2></div>\n      <div id=\"listContainer\">\n      <div id=\"statContainer\">Card Count: {selected.length}</div>\n        {\n          selected && selected.map((id) => \n          <div className=\"listItem\" key={id}>\n            <span>{Cards[id].name}</span>\n            <button onClick={() => removeFromList(id)}>Remove</button>\n          </div>\n          )\n        }\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}